Index: test/Tic_Tac_Toe/Player.java
===================================================================
diff --git a/test/Tic_Tac_Toe/Player.java b/test/Tic_Tac_Toe/Player.java
new file mode 100644
--- /dev/null	
+++ b/test/Tic_Tac_Toe/Player.java	
@@ -0,0 +1,17 @@
+package Tic_Tac_Toe;
+
+public class Player {
+    private String name;
+    private int players = 2;
+
+    public Player(String name, int players) {
+        this.name = name;
+        this.players = players;
+
+    }
+
+    public String toString() {
+        return "Name: " + name + "Player1:" + players;
+    }
+
+}
Index: src/BackToSenderLogistics/DispatchRiders.java
===================================================================
diff --git a/src/BackToSenderLogistics/DispatchRiders.java b/src/BackToSenderLogistics/DispatchRiders.java
new file mode 100644
--- /dev/null	
+++ b/src/BackToSenderLogistics/DispatchRiders.java	
@@ -0,0 +1,16 @@
+package BackToSenderLogistics;
+
+public class DispatchRiders {
+    static final int basePay = 5000;
+
+    public static int ridersPayment(int successfulDelivery) {
+        int amountPay = 0;
+        if (successfulDelivery >= 1 && successfulDelivery < 50){ amountPay = 160;}
+        else if (successfulDelivery > 50 && successfulDelivery <= 59){ amountPay = 200;}
+        else if (successfulDelivery > 59 && successfulDelivery <= 69){ amountPay = 250;}
+        else if (successfulDelivery >= 70){ amountPay = 500;}
+        else  { throw new InvalidInputException("Invalid input");}
+        return successfulDelivery * amountPay + basePay;
+    }
+}
+
Index: src/ArrayList/MyArrayList.java
===================================================================
diff --git a/src/ArrayList/MyArrayList.java b/src/ArrayList/MyArrayList.java
new file mode 100644
--- /dev/null	
+++ b/src/ArrayList/MyArrayList.java	
@@ -0,0 +1,15 @@
+package ArrayList;
+
+public class MyArrayList {
+
+
+
+    public static int[] get(int ...array) {
+        for (int i = 0; i < array.length; i++) {
+
+        }
+        return array;
+
+    }
+
+    }
\ No newline at end of file
Index: src/personal/AddTwoNumbers.java
===================================================================
diff --git a/src/personal/AddTwoNumbers.java b/src/personal/AddTwoNumbers.java
new file mode 100644
--- /dev/null	
+++ b/src/personal/AddTwoNumbers.java	
@@ -0,0 +1,20 @@
+package personal;
+
+public class AddTwoNumbers {
+
+     public static int addition(int number1, int number2){
+
+         return number1 + number2;
+        }
+        public static int subtraction(int number1, int number2){
+         return number1 - number2;
+        }
+    public static int division(int number1, int number2){
+        return number1 / number2;
+    }
+public static int multiply(int number1, int number2){
+         return number1 * number2;
+}
+
+    }
+
Index: src/DateOfBirth.java
===================================================================
diff --git a/src/DateOfBirth.java b/src/DateOfBirth.java
new file mode 100644
--- /dev/null	
+++ b/src/DateOfBirth.java	
@@ -0,0 +1,15 @@
+import java.time.LocalDate;
+
+public class DateOfBirth {
+    private final LocalDate date;
+
+    public DateOfBirth(String birthDate) {
+    this.date = LocalDate.parse(birthDate);
+    }
+       
+    public LocalDate getDate() {
+        return date;
+    }
+}
+
+
Index: test/chapterThree/AddTwoNumbersTest.java
===================================================================
diff --git a/test/chapterThree/AddTwoNumbersTest.java b/test/chapterThree/AddTwoNumbersTest.java
new file mode 100644
--- /dev/null	
+++ b/test/chapterThree/AddTwoNumbersTest.java	
@@ -0,0 +1,31 @@
+package chapterThree;
+
+import org.junit.jupiter.api.Test;
+import personal.AddTwoNumbers;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class AddTwoNumbersTest {
+    @Test
+    public void TestThat_FunctionCanAddTwoNumbers() {
+        int result = AddTwoNumbers.addition(10, 20);
+        assertEquals(30, result);
+    }
+
+    @Test
+    public void TestThat_FunctionCanSubtractTwoNumbers() {
+        int result = AddTwoNumbers.subtraction(20, 16);
+        assertEquals(4, result);
+
+    }
+    @Test
+    public void TestThat_FunctionCanDivideTwoNumbers(){
+        int result = AddTwoNumbers.division(45, 9);
+        assertEquals(5, result);
+    }
+    @Test
+    public void TestThat_FunctionCanMultiplyNumbers(){
+        int result = AddTwoNumbers.multiply(13, 13);
+        assertEquals(169, result);
+    }
+}
\ No newline at end of file
Index: test/BackToSenderLogistics/DispatchRidersTest.java
===================================================================
diff --git a/test/BackToSenderLogistics/DispatchRidersTest.java b/test/BackToSenderLogistics/DispatchRidersTest.java
new file mode 100644
--- /dev/null	
+++ b/test/BackToSenderLogistics/DispatchRidersTest.java	
@@ -0,0 +1,39 @@
+package BackToSenderLogistics;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class DispatchRidersTest {
+
+    @Test
+    public void successfulDeliveryOf1_ridersPayment1(){
+        assertEquals(5_160, DispatchRiders.ridersPayment(1));
+    }
+
+    @Test
+   public void successfulDeliveryOf25_ridersPayment() {
+        assertEquals(9_000, DispatchRiders.ridersPayment(25));
+    }
+    @Test
+    public void successfulDeliveryOf60_ridersPayment() {
+        assertEquals(20_000, DispatchRiders.ridersPayment(60));
+
+    }
+    @Test
+    public void successfulDeliveryOf70_ridersPayment() {
+        assertEquals(40_000, DispatchRiders.ridersPayment(70));
+
+    }
+    @Test
+
+    public void successfulDeliveryOf80_ridersPayment() {
+        assertEquals(45_000, DispatchRiders.ridersPayment(80));
+
+    }
+    @Test
+    public void enterZero_throwInvalidInputException(){
+        assertThrows(InvalidInputException.class,() -> DispatchRiders.ridersPayment(0));
+    }
+
+    }
Index: test/chapterThree/ReplaceArrayTest.java
===================================================================
diff --git a/test/chapterThree/ReplaceArrayTest.java b/test/chapterThree/ReplaceArrayTest.java
new file mode 100644
--- /dev/null	
+++ b/test/chapterThree/ReplaceArrayTest.java	
@@ -0,0 +1,21 @@
+package chapterThree;
+
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+
+class ReplaceArrayTest {
+
+    ReplaceArray myReplaceArray;
+    @BeforeEach
+    void initialize() {
+        myReplaceArray = new ReplaceArray();
+    }
+    @Test
+    public void testThat_arrayList_returnsZerosAndOnes(){
+    int [] array = {1, 2, 3, 4, 5};
+    int [] result = {1, 0, 1, 0, 1};
+    assertArrayEquals(result,myReplaceArray.getNumbers(array));
+    }
+}
Index: src/chapterThree/Problem.java
===================================================================
diff --git a/src/chapterThree/Problem.java b/src/chapterThree/Problem.java
new file mode 100644
--- /dev/null	
+++ b/src/chapterThree/Problem.java	
@@ -0,0 +1,18 @@
+package chapterThree;
+
+public class Problem {
+    private final String name;
+    private final Type type;
+
+    public Problem(String name, Type type){
+    this.name = name;
+    this.type = type;
+    }
+
+public String getName(){
+    return name;
+}
+public Type getType(){
+    return type;
+}
+}
Index: src/chapterThree/ReplaceArray.java
===================================================================
diff --git a/src/chapterThree/ReplaceArray.java b/src/chapterThree/ReplaceArray.java
new file mode 100644
--- /dev/null	
+++ b/src/chapterThree/ReplaceArray.java	
@@ -0,0 +1,11 @@
+package chapterThree;
+
+public class ReplaceArray {
+
+    public static int[] getNumbers(int...numbers) {
+        for(int index = 0; index < numbers.length; index++){
+            numbers[index] = numbers[index] %2;
+        }
+        return numbers;
+    }
+}
Index: src/chapterThree/Person.java
===================================================================
diff --git a/src/chapterThree/Person.java b/src/chapterThree/Person.java
new file mode 100644
--- /dev/null	
+++ b/src/chapterThree/Person.java	
@@ -0,0 +1,21 @@
+package chapterThree;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Person {
+
+    private final List<Problem> Problems = new ArrayList<>();
+        public void addProblem(Problem problem) {
+            Problems.add(problem);
+        }
+        public void solveProblem(Problem problem) {
+                         Problems.size();
+        }
+
+        public void recount() {
+
+        }
+    }
+
+
Index: test/DateOfBirthTest.java
===================================================================
diff --git a/test/DateOfBirthTest.java b/test/DateOfBirthTest.java
new file mode 100644
--- /dev/null	
+++ b/test/DateOfBirthTest.java	
@@ -0,0 +1,10 @@
+import org.junit.jupiter.api.Test;
+
+public class DateOfBirthTest {
+    DateOfBirth dateOfBirth;
+
+
+    @Test
+    public void testThat_functionReturnsAge() {
+    }
+}
\ No newline at end of file
Index: src/chapterThree/Type.java
===================================================================
diff --git a/src/chapterThree/Type.java b/src/chapterThree/Type.java
new file mode 100644
--- /dev/null	
+++ b/src/chapterThree/Type.java	
@@ -0,0 +1,10 @@
+package chapterThree;
+
+public enum Type {
+    FINANCIAL,
+    SPIRITUAL,
+    EDUCATION,
+    BUSINESS,
+    TECHNICAL;
+
+}
Index: test/chapterThree/PersonTest.java
===================================================================
diff --git a/test/chapterThree/PersonTest.java b/test/chapterThree/PersonTest.java
new file mode 100644
--- /dev/null	
+++ b/test/chapterThree/PersonTest.java	
@@ -0,0 +1,12 @@
+package chapterThree;
+
+import org.junit.jupiter.api.Test;
+
+public class PersonTest {
+    Person person = new Person();
+    @Test
+    public void testThatThere_isProblem(){
+
+
+    }
+}
Index: src/DisplayStars.java
===================================================================
diff --git a/src/DisplayStars.java b/src/DisplayStars.java
new file mode 100644
--- /dev/null	
+++ b/src/DisplayStars.java	
@@ -0,0 +1,8 @@
+import java.util.Scanner;
+
+public class DisplayStars {
+    public static void main(String[] args) {
+        Scanner scanner = new Scanner(System.in);
+    }
+
+}
\ No newline at end of file
Index: src/chapterThree/DemoArray1.java
===================================================================
diff --git a/src/chapterThree/DemoArray1.java b/src/chapterThree/DemoArray1.java
new file mode 100644
--- /dev/null	
+++ b/src/chapterThree/DemoArray1.java	
@@ -0,0 +1,8 @@
+package chapterThree;
+
+public class DemoArray1 {
+    public static void main(String[] args) {
+        int[] array = new int[10];
+        System.out.println(array.toString());
+    }
+}
\ No newline at end of file
Index: src/chapterThree/DemoArray.java
===================================================================
diff --git a/src/chapterThree/DemoArray.java b/src/chapterThree/DemoArray.java
new file mode 100644
--- /dev/null	
+++ b/src/chapterThree/DemoArray.java	
@@ -0,0 +1,17 @@
+package chapterThree;
+
+public class DemoArray {
+    public static boolean isFalse;
+    public static boolean isTrue;
+
+    public static boolean[] getNumbers(int... numbers) {
+        boolean[] result = new boolean[numbers.length];
+        for (int index = 0; index < numbers.length; index++ ) result[index] = numbers[index] % 2 == 1;
+            return result;
+        }
+    }
+
+
+
+
+
Index: src/Inheritance/Amphibians.java
===================================================================
diff --git a/src/Inheritance/Amphibians.java b/src/Inheritance/Amphibians.java
new file mode 100644
--- /dev/null	
+++ b/src/Inheritance/Amphibians.java	
@@ -0,0 +1,4 @@
+package Inheritance;
+
+public class Amphibians extends Vertebrates{
+}
Index: src/Inheritance/Reptiles.java
===================================================================
diff --git a/src/Inheritance/Reptiles.java b/src/Inheritance/Reptiles.java
new file mode 100644
--- /dev/null	
+++ b/src/Inheritance/Reptiles.java	
@@ -0,0 +1,4 @@
+package Inheritance;
+
+public class Reptiles extends Vertebrates{
+}
Index: src/Inheritance/Mammals.java
===================================================================
diff --git a/src/Inheritance/Mammals.java b/src/Inheritance/Mammals.java
new file mode 100644
--- /dev/null	
+++ b/src/Inheritance/Mammals.java	
@@ -0,0 +1,4 @@
+package Inheritance;
+
+public class Mammals extends Vertebrates{
+}
Index: test/Inheritance/LivingThingsTest.java
===================================================================
diff --git a/test/Inheritance/LivingThingsTest.java b/test/Inheritance/LivingThingsTest.java
new file mode 100644
--- /dev/null	
+++ b/test/Inheritance/LivingThingsTest.java	
@@ -0,0 +1,14 @@
+package Inheritance;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class LivingThingsTest {
+
+    @Test
+    void move() {
+        LivingThings precious = new LivingThings();
+        precious.move();
+    }
+}
\ No newline at end of file
Index: test/Tic_Tac_Toe/TicTacToeTest.java
===================================================================
diff --git a/test/Tic_Tac_Toe/TicTacToeTest.java b/test/Tic_Tac_Toe/TicTacToeTest.java
new file mode 100644
--- /dev/null	
+++ b/test/Tic_Tac_Toe/TicTacToeTest.java	
@@ -0,0 +1,33 @@
+package Tic_Tac_Toe;
+
+
+import org.junit.Test;
+
+
+public class TicTacToeTest {
+
+    @Test
+   public void displayBoard() {
+        TicTacToe game = new TicTacToe();
+        game.displayBoard();
+
+    }
+    @Test
+    public void makeMove() {
+        TicTacToe game = new TicTacToe();
+        game.makeMove(3, 3,  CellValue.EMPTY);
+
+    }
+    @Test
+    public void test_that_player_made_a_move(){
+        TicTacToe game = new TicTacToe();
+        game.makeMove(3, 2, CellValue.O);
+
+    }
+    @Test
+    public void test_that_player2_made_a_move(){
+        TicTacToe game = new TicTacToe();
+        game.makeMove(2, 3, CellValue.X);
+
+    }
+}
\ No newline at end of file
Index: .idea/uiDesigner.xml
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/uiDesigner.xml	
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/Tic_Tac_Toe/CellValue.java
===================================================================
diff --git a/src/Tic_Tac_Toe/CellValue.java b/src/Tic_Tac_Toe/CellValue.java
new file mode 100644
--- /dev/null	
+++ b/src/Tic_Tac_Toe/CellValue.java	
@@ -0,0 +1,8 @@
+package Tic_Tac_Toe;
+
+public enum CellValue {
+    EMPTY,
+    X,
+    O,
+}
+
Index: src/Inheritance/Plants.java
===================================================================
diff --git a/src/Inheritance/Plants.java b/src/Inheritance/Plants.java
new file mode 100644
--- /dev/null	
+++ b/src/Inheritance/Plants.java	
@@ -0,0 +1,4 @@
+package Inheritance;
+
+public class Plants extends LivingThings{
+}
Index: src/Tic_Tac_Toe/TicTacToe.java
===================================================================
diff --git a/src/Tic_Tac_Toe/TicTacToe.java b/src/Tic_Tac_Toe/TicTacToe.java
new file mode 100644
--- /dev/null	
+++ b/src/Tic_Tac_Toe/TicTacToe.java	
@@ -0,0 +1,33 @@
+package Tic_Tac_Toe;
+
+public class TicTacToe {
+    private CellValue[][] boardElements;
+
+    public TicTacToe() {
+        boardElements = new CellValue[3][3];
+        for (int i = 0; i < 3; i++) {
+            for (int j = 0; j < 3; j++) {
+                boardElements[i][j] = CellValue.EMPTY;
+            }
+        }
+    }
+
+    public void displayBoard() {
+        for (int i = 0; i < 3; i++) {
+            for (int j = 0; j < 3; j++) {
+
+                System.out.println(boardElements[i][j]);
+            }
+        }
+
+    }
+        public boolean makeMove(int row, int column, CellValue player){
+            if (row < 0 || row >= 3 || column < 0 || column >= 3 || boardElements[row][column] != Tic_Tac_Toe.CellValue.EMPTY) {
+
+                return false;
+            }
+            boardElements[row][column] = player;
+            return true;
+        }
+}
+
Index: src/Inheritance/Vertebrates.java
===================================================================
diff --git a/src/Inheritance/Vertebrates.java b/src/Inheritance/Vertebrates.java
new file mode 100644
--- /dev/null	
+++ b/src/Inheritance/Vertebrates.java	
@@ -0,0 +1,4 @@
+package Inheritance;
+
+public class Vertebrates extends Animal{
+}
Index: src/Inheritance/Animal.java
===================================================================
diff --git a/src/Inheritance/Animal.java b/src/Inheritance/Animal.java
new file mode 100644
--- /dev/null	
+++ b/src/Inheritance/Animal.java	
@@ -0,0 +1,4 @@
+package Inheritance;
+
+public class Animal extends LivingThings {
+}
Index: src/Inheritance/Aves.java
===================================================================
diff --git a/src/Inheritance/Aves.java b/src/Inheritance/Aves.java
new file mode 100644
--- /dev/null	
+++ b/src/Inheritance/Aves.java	
@@ -0,0 +1,4 @@
+package Inheritance;
+
+public class Aves extends Vertebrates{
+}
Index: test/ArrayList/MyArrayListTest.java
===================================================================
diff --git a/test/ArrayList/MyArrayListTest.java b/test/ArrayList/MyArrayListTest.java
new file mode 100644
--- /dev/null	
+++ b/test/ArrayList/MyArrayListTest.java	
@@ -0,0 +1,47 @@
+package ArrayList;
+
+import org.junit.jupiter.api.Test;
+
+import java.util.ArrayList;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+class MyArrayListTest {
+
+    @Test
+    public void testThat_elementsCanBeAdded(){
+            ArrayList<Integer> myArrayList = new ArrayList<>();
+            myArrayList.add(20);
+            myArrayList.add(23);
+            myArrayList.add(15);
+            assertEquals(20, myArrayList.get(0));
+            assertEquals(23, myArrayList.get(1));
+            assertEquals(15, myArrayList.get(2));
+        }
+    @Test
+    public void testThat_elementsHaveAnIndex() {
+        ArrayList<Integer> myArrayList = new ArrayList<>();
+        myArrayList.add(20);
+        myArrayList.add(23);
+        myArrayList.add(15);
+        myArrayList.indexOf(20);
+        assertEquals(0,myArrayList.indexOf(20));
+        assertEquals(1,myArrayList.indexOf(23));
+        assertEquals(2,myArrayList.indexOf(15));
+
+    }
+
+    @Test
+    public void testThat_elementsCanBeRemoved(){
+        ArrayList<Integer> myArrayList = new ArrayList<>();
+        myArrayList.add(20);
+        myArrayList.add(23);
+        myArrayList.add(15);
+        myArrayList.remove(2);
+        assertEquals(20, myArrayList.get(0));
+        assertEquals(23, myArrayList.get(1));
+    }
+
+
+
+}
Index: src/Inheritance/Invertebrates.java
===================================================================
diff --git a/src/Inheritance/Invertebrates.java b/src/Inheritance/Invertebrates.java
new file mode 100644
--- /dev/null	
+++ b/src/Inheritance/Invertebrates.java	
@@ -0,0 +1,4 @@
+package Inheritance;
+
+public class Invertebrates extends Animal{
+}
Index: src/Inheritance/Pisces.java
===================================================================
diff --git a/src/Inheritance/Pisces.java b/src/Inheritance/Pisces.java
new file mode 100644
--- /dev/null	
+++ b/src/Inheritance/Pisces.java	
@@ -0,0 +1,4 @@
+package Inheritance;
+
+public class Pisces extends Vertebrates{
+}
Index: src/BackToSenderLogistics/InvalidInputException.java
===================================================================
diff --git a/src/BackToSenderLogistics/InvalidInputException.java b/src/BackToSenderLogistics/InvalidInputException.java
new file mode 100644
--- /dev/null	
+++ b/src/BackToSenderLogistics/InvalidInputException.java	
@@ -0,0 +1,7 @@
+package BackToSenderLogistics;
+
+public class InvalidInputException extends RuntimeException{
+    public InvalidInputException(String message){
+
+    }
+}
Index: src/fireDrillTwo/TaskFour.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fireDrillTwo;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class TaskFour {\r\n    public static void main(String[] args) {\r\n        Scanner input = new Scanner(System.in);\r\n\r\n        int count = 0;\r\n        int sum = 0;\r\n        while (count < 10) {\r\n            System.out.println(\"Enter scores \" + (count + 1) + \":\");\r\n            int score = input.nextInt();\r\n            count++;\r\n            for (int index = 0; index < 10; index++) {\r\n                if (index % 2 == 0) {\r\n                    sum += score;\r\n                }\r\n                System.out.println(\"The sum is:\" + sum);\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/fireDrillTwo/TaskFour.java b/src/fireDrillTwo/TaskFour.java
--- a/src/fireDrillTwo/TaskFour.java	
+++ b/src/fireDrillTwo/TaskFour.java	
@@ -14,10 +14,11 @@
             count++;
             for (int index = 0; index < 10; index++) {
                 if (index % 2 == 0) {
-                    sum += score;
+                    sum = score + index;
                 }
+
                 System.out.println("The sum is:" + sum);
             }
         }
     }
-}
\ No newline at end of file
+}
